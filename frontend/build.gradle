group = 'io.pnyx.coinapse'
version = '0.0.1-SNAPSHOT'

apply plugin: 'kotlin2js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'org.jetbrains.kotlin.frontend'

repositories {
    jcenter()
    maven {
        url  "https://kotlin.bintray.com/kotlin-js-wrappers"
    }
    maven {
        url  "https://dl.bintray.com/kotlin/kotlinx.html"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile 'org.jetbrains:kotlin-extensions:1.0.1-pre.25-kotlin-1.2.30'
    compile 'org.jetbrains:kotlin-react:16.3.1-pre.25-kotlin-1.2.30'
    compile 'org.jetbrains:kotlin-react-dom:16.3.1-pre.25-kotlin-1.2.30'
    //compile 'org.jetbrains.kotlinx:kotlinx-html:$html_version'
    compile("org.jetbrains.kotlinx:kotlinx-html-js:$html_version")
}



kotlinFrontend {
    sourceMaps = true
    downloadNodeJsVersion = "latest"

    npm {
        dependency "react"
        dependency "react-dom"
        dependency("react-router-dom")
    }

    webpackBundle {
        publicPath = "/"
        port = 8080
        proxyUrl = "http://localhost:9090"

        //bundleName = "main"
        contentPath = file('src/main/web')
        webpackConfigFile = project.projectDir.path + '/webpack.config.js'
        sourceMapEnabled = true
    }

    define "PRODUCTION", false//??
}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/app.js"
    kotlinOptions.sourceMap = true
    //kotlinOptions.sourceMapEmbedSources = "always"
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.main = "call"
/*
friendModulesDisabled	Disable internal declaration export	 	false
main	Whether a main function should be called	"call", "noCall"	"call"
metaInfo	Generate .meta.js and .kjsm files with metadata. Use to create a library	 	true
moduleKind	Kind of a module generated by compiler	"plain", "amd", "commonjs", "umd"	"plain"
noStdlib	Don't use bundled Kotlin stdlib	 	true
outputFile	Output file path
sourceMap	Generate source map	 	false
sourceMapEmbedSources	Embed source files into source map	"never", "always", "inlining"
sourceMapPrefix	Prefix for paths in a source map
target	Generate JS files for specific ECMA version	"v5"	"v5"
typedArrays	Translate primitive arrays to JS typed arrays	 	true
 */

/*
    compileKotlin2Js.kotlinOptions.suppressWarnings = true
    compileKotlin2Js.kotlinOptions.verbose = true
    compileKotlin2Js.kotlinOptions.version = true
*/
}

//TODO copyKotlinJs.into "${projectDir}/../coinapseindex.js"


kotlin {
    experimental {
        coroutines "enable"
    }
}






task copyRn(type: Copy) {
    from 'build/js'
    into 'build/js-native'
    filter{ it.replaceAll('react-native-web', 'react-native')}
}

copyRn.dependsOn compileKotlin2Js

bundle.dependsOn copyRn


compileTestKotlin2Js {
    kotlinOptions.outputFile = null// aka disable karma
    kotlinOptions.sourceMap = true
}

/*
compileTestKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js-tests/${project.name}-tests.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'commonjs'
//    kotlinOptions.moduleName = project.name + "-test"
    kotlinOptions.main = "call"
}
*/
